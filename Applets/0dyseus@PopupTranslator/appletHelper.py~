#!/usr/bin/python3

import os
import sys
import gettext

try:
    import requests
except ImportError:
    raise ImportError('ImportError')

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gio, Gtk, Pango, Gdk

# i18n
gettext.install("cinnamon", "/usr/share/locale")

home = os.path.expanduser("~")
appletUUID = "0dyseus@PopupTranslator"

translations = {}


def trans(string):
    # check for a translation for this xlet
    if appletUUID not in translations:
        try:
            translations[appletUUID] = gettext.translation(appletUUID,
                                                           home + "/.local/share/locale").gettext
        except IOError:
            try:
                translations[appletUUID] = gettext.translation(appletUUID,
                                                               "/usr/share/locale").gettext
            except IOError:
                translations[appletUUID] = None

    # do not translate whitespaces
    if not string.strip():
        return string

    if translations[appletUUID]:
        result = translations[appletUUID](string)

        try:
            result = result.decode("utf-8")
        except:
            result = result

        if result != string:
            return result
    return _(string)


class YandexTranslator:

    def __init__(self):
        self.headers = {
            "user-agent": "Mozilla/5.0",
            "Referer": "https://translate.yandex.net/",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        #                       URL         % (APIKey       langPair     text)
        self.req = requests.get(sys.argv[2] % (sys.argv[3], sys.argv[4], sys.argv[5]),
                                headers=self.headers, timeout=5)

    def translate(self):
        print(self.req.text)


class GoogleTranslator:

    def __init__(self):
        self.headers = {
            "user-agent": "Mozilla/5.0",
            "Referer": "https://translate.google.com/",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        #                       URL         + text
        self.req = requests.get(sys.argv[2] + sys.argv[3], headers=self.headers, timeout=5)

    def translate(self):
        if self.req.status_code == requests.codes.ok:
            print(self.req.text)
        else:
            print("self.req.status_code: %s") % self.req.status_code


class HistoryWindow:

    def __init__(self):
        self.builder = Gtk.Builder()
        self.builder.add_from_file(
            "/home/odyseus/.local/share/cinnamon/applets/0dyseus@PopupTranslator/assets/cinnamon-settings.ui")
        self.window = self.builder.get_object("main_window")
        # self.top_bar = self.builder.get_object("top_bar")
        # self.side_view = {}
        # self.main_stack = self.builder.get_object("main_stack")
        # self.main_stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE)
        # self.main_stack.set_transition_duration(150)
        # self.header_stack = self.builder.get_object("header_stack")
        # self.header_stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE)
        # self.header_stack.set_transition_duration(150)
        # self.side_view_container = self.builder.get_object("category_box")
        # self.side_view_sw = self.builder.get_object("side_view_sw")
        # context = self.side_view_sw.get_style_context()
        # context.add_class("cs-category-view")
        # context.add_class("view")
        # self.side_view_sw.show_all()
        self.content_box = self.builder.get_object("content_box")
        # self.content_box_sw = self.builder.get_object("content_box_sw")
        # self.content_box_sw.show_all()

        # self.search_entry = self.builder.get_object("search_box")
        # self.search_entry.connect("changed", self.onSearchTextChanged)
        # self.search_entry.connect("icon-press", self.onClearSearchBox)

        self.window.connect("destroy", self.quit)

        self.builder.get_object("search_box").hide()
        self.builder.get_object("content_box_sw").hide()
        self.builder.get_object("side_view_sw").hide()
        self.builder.get_object("category_box").hide()
        self.builder.get_object("header_stack").hide()
        self.builder.get_object("main_stack").hide()
        self.builder.get_object("top_bar").hide()

        self.treeview = Gtk.TreeView()
        self.treeview.set_rules_hint(True)
        self.treeview.set_has_tooltip(True)

        cr1 = Gtk.CellRendererText()
        column1 = Gtk.TreeViewColumn("Date", cr1, markup=1)
        column1.set_expand(True)
        cr1.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr1.set_property('wrap-width', 200)

        cr2 = Gtk.CellRendererText()
        column2 = Gtk.TreeViewColumn("Source Language", cr2, markup=1)
        column2.set_expand(True)
        cr2.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr2.set_property('wrap-width', 450)

        cr3 = Gtk.CellRendererText()
        column3 = Gtk.TreeViewColumn("Language Pair", cr3, markup=1)
        column3.set_expand(True)
        cr3.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr3.set_property('wrap-width', 200)

        cr4 = Gtk.CellRendererText()
        column4 = Gtk.TreeViewColumn("Target Language", cr4, markup=1)
        column4.set_expand(True)
        cr4.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr4.set_property('wrap-width', 450)

        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        scrolledWindow.set_border_width(6)

        self.treeview.append_column(column1)
        self.treeview.append_column(column2)
        self.treeview.append_column(column3)
        self.treeview.append_column(column4)
        self.treeview.set_headers_visible(True)

        scrolledWindow.add(self.treeview)

        # extensions_vbox = Gtk.VBox()
        # extensions_vbox.pack_start(scrolledWindow, True, True, 0)

        self.content_box.add(scrolledWindow)
        # self.content_box.pack_start(scrolledWindow, True, True, 0)

        self.content_box.show_all()
        self.window.show()

        # set up larger components.
        self.window.set_title(trans("Popup Translator history"))

    def quit(self, *args):
        self.window.destroy()
        Gtk.main_quit()

    def onSearchTextChanged(self, widget):
        print("self.displayCategories()")

    def onClearSearchBox(self, widget, position, event):
        if position == Gtk.EntryIconPosition.SECONDARY:
            self.search_entry.set_text("")


def main():
    arg = sys.argv[1]
    if arg == "google":
        GoogleTranslator().translate()
    elif arg == "yandex":
        YandexTranslator().translate()
    elif arg == "test":
        import signal

        window = HistoryWindow()
        signal.signal(signal.SIGINT, window.quit)
        Gtk.main()

if __name__ == "__main__":
    main()
